<!--
Program: PBooks
Component: general_ledger_get_all.xml
Copyright: Savonix Corporation
Author: Albert L. Lash, IV
License: Gnu Affero Public License version 3
http://www.gnu.org/licenses

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation; either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program; if not, see http://www.gnu.org/licenses
or write to the Free Software Foundation, Inc., 51 Franklin Street,
Fifth Floor, Boston, MA 02110-1301 USA
-->
<!DOCTYPE query SYSTEM "__default_table_names__.txt">
<query name="get_all_transactions">
	<connection>&pb_connection_read;</connection>
	<params>
		<param name="_get/account_id" type="text" default="%"/>
		<param name="runtime/from_date" type="text" />
		<param name="runtime/to_date" type="text" />
		<param name="//option_get_company_name/fiscal_period_id" type="text" default="%"/>
	</params>
	<sql>
  <!-- First thing you need to do is get the same functionality without
  using SUM in initial select -->

  <!-- This query is supposed to do the same thing as the regular version,
  but include a cell containing the corresponding account names separated by commas -->

  SELECT l.entry_amount,l.memorandum,l.entry_datetime,l.entry_id,
  (
    SELECT SUM(ll.entry_amount)
    FROM &pb_general_ledger; AS ll
    WHERE
    ll.account_id = l.account_id
    AND
    (
      ll.entry_datetime &lt; l.entry_datetime
      OR
      (
        ll.entry_datetime = l.entry_datetime
        AND
        ll.entry_amount &gt;= l.entry_amount
      )
    )
  ) as balance,
  (
    SELECT GROUP_CONCAT(aa.name) FROM &pb_entry_amounts; AS j, &pb_accounts; AS aa
    WHERE j.entry_id = l.entry_id
    AND j.account_id != l.account_id
    AND aa.id = j.account_id
  ) AS corresponding_accounts

  FROM (&pb_accounts; AS a), (&pb_general_ledger; AS l)

  WHERE

  l.account_id = ?

  AND l.account_id=a.id

  AND l.entry_datetime &gt;= ?
  AND l.entry_datetime &lt;= ?
  AND l.fiscal_period_id LIKE ?

  GROUP BY  l.transaction_id

  ORDER BY l.entry_datetime
	</sql>
</query>
